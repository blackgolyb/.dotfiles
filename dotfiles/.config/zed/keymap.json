// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
    // {
    //     "context": "VimControl && !menu && vim_mode != operator",
    //     "bindings": {
    //         "w": "vim::NextSubwordStart",
    //         "b": "vim::PreviousSubwordStart",
    //         "e": "vim::NextSubwordEnd",
    //         "g e": "vim::PreviousSubwordEnd"
    //     }
    // },
    {
        "context": "Editor && vim_mode == visual && !VimWaiting && !VimObject",
        "bindings": {
            "shift-s": [
                "vim::PushOperator",
                {
                    "AddSurrounds": {}
                }
            ]
        }
    },
    {
        "context": "vim_mode == normal && !menu",
        "bindings": {
            "shift-y": ["workspace::SendKeystrokes", "y $"]
        }
    },
    {
        "context": "Editor && vim_mode == visual",
        "bindings": {
            "space p": ["workspace::SendKeystrokes", "\" t d shift-p"]
        }
    },
    {
        "context": "Editor && vim_mode == normal",
        "bindings": {
            "g k": "editor::AddSelectionAbove",
            "g j": "editor::AddSelectionBelow"
        }
    },
    {
        "context": "vim_mode == normal || EmptyPane",
        "bindings": {
            "space f": "file_finder::Toggle",
            "space t": "tab_switcher::Toggle",
            "space e": "project_panel::ToggleFocus",
            "space b": "workspace::ToggleLeftDock",
            "space o": "outline::Toggle",
            "space d": "diagnostics::Deploy",
            "space z": "workspace::ToggleCenteredLayout",
            // For AI auto inline complete (but using by trigger)
            // NOTE: no ways to disable it ;(
            "space a i": "editor::ToggleInlineCompletions",
            "space a n": "editor::NextInlineCompletion",
            "space a shift-n": "editor::PreviousInlineCompletion",
            "space a a": [
                "editor::AcceptInlineCompletion",
                "editor::ToggleInlineCompletions"
            ]
        }
    },
    {
        "context": "Editor && inline_completion && !showing_completions",
        "bindings": {
            "escape": ["editor::ToggleInlineCompletions", "false"]
        }
    },
    {
        "context": "Editor && vim_mode == insert && inline_completion && !showing_completions",
        "bindings": {
            "tab": "editor::Tab"
            // "enter": "vim::Enter"
        }
    },
    {
        "context": "TabSwitcher",
        "bindings": {
            "d": "tab_switcher::CloseSelectedItem",
            "j": ["workspace::SendKeystrokes", "down"],
            "k": ["workspace::SendKeystrokes", "up"]
        }
    },
    {
        "context": "not_editing",
        "bindings": {
            "j": "menu::SelectNext",
            "k": "menu::SelectPrev",
            "y": "menu::Confirm"
        }
    },
    {
        "context": "ProjectPanel && not_editing",
        "bindings": {
            "escape": "workspace::ToggleLeftDock",
            "enter": ["workspace::SendKeystrokes", "shift-enter escape"],
            "shift-enter": "project_panel::OpenPermanent",
            "shift-space": ["workspace::SendKeystrokes", "space escape"],
            "space": "project_panel::Open",
            "e": "project_panel::ToggleFocus",
            "h": "project_panel::CollapseSelectedEntry",
            "l": "project_panel::ExpandSelectedEntry",
            "r": "project_panel::Rename",
            "o": "project_panel::RevealInFileManager",
            "x": "project_panel::Cut",
            "y": "project_panel::Copy",
            "p": "project_panel::Paste",
            "d": "project_panel::Delete",
            "n": "project_panel::NewFile",
            "shift-n": "project_panel::NewDirectory",
            "ctrl-n": "project_panel::Duplicate",
            "g y": "project_panel::CopyRelativePath",
            "g shift-y": "project_panel::CopyPath"
        }
    }
]
